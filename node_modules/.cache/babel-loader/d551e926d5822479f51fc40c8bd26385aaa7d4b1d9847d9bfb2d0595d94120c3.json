{"ast":null,"code":"export default {\n  name: 'QuizPage',\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      selectedOption: null,\n      score: 0,\n      feedback: '',\n      isFinished: false,\n      timer: 10,\n      initialTime: 10,\n      timerInterval: null,\n      loading: true\n    };\n  },\n  computed: {\n    progressCircleStyle() {\n      const progress = (this.initialTime - this.timer) / this.initialTime * 100;\n      return {\n        background: `conic-gradient(#42b983 ${progress}%, #ddd ${progress}% 100%)`\n      };\n    },\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex];\n    },\n    finalComment() {\n      if (this.score === this.questions.length) {\n        return \"Excellent travail ! üéâ\";\n      } else if (this.score >= this.questions.length / 2) {\n        return \"Pas mal ! Vous avez bien r√©pondu ! üòä\";\n      } else {\n        return \"Il y a encore du travail √† faire. Essayez encore ! üòÖ\";\n      }\n    }\n  },\n  created() {\n    this.fetchQuestions();\n  },\n  methods: {\n    async fetchQuestions() {\n      try {\n        const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple&language=fr');\n        const data = await response.json();\n        this.questions = data.results.map(item => ({\n          question: item.question,\n          options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\n          correctAnswer: item.correct_answer\n        }));\n        this.startTimer(); // D√©marrer le chronom√®tre apr√®s avoir r√©cup√©r√© les questions\n      } catch (error) {\n        console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\n      }\n    },\n    selectOption(option) {\n      this.selectedOption = option;\n      this.feedback = this.selectedOption === this.currentQuestion.correctAnswer ? 'Correct ! üéâ' : 'Incorrect ! üò¢';\n      if (this.selectedOption === this.currentQuestion.correctAnswer) {\n        this.score++;\n      }\n      clearInterval(this.timerInterval); // Arr√™ter le chronom√®tre lors de la s√©lection\n    },\n    nextQuestion() {\n      this.selectedOption = null;\n      this.feedback = '';\n      this.currentQuestionIndex++;\n      if (this.currentQuestionIndex >= this.questions.length) {\n        this.isFinished = true;\n      } else {\n        this.resetTimer(); // R√©initialiser le chronom√®tre pour la nouvelle question\n      }\n    },\n    restartQuiz() {\n      this.currentQuestionIndex = 0;\n      this.score = 0;\n      this.isFinished = false;\n      this.fetchQuestions(); // Recharger les questions pour une nouvelle partie\n    },\n    startTimer() {\n      this.timer = 10; // R√©initialiser le temps\n      this.timerInterval = setInterval(() => {\n        if (this.timer > 0) {\n          this.timer--;\n        } else {\n          clearInterval(this.timerInterval);\n          this.feedback = 'Temps √©coul√© ! üò¢';\n          this.nextQuestion(); // Passer √† la question suivante si le temps est √©coul√©\n        }\n      }, 1000);\n    },\n    resetTimer() {\n      clearInterval(this.timerInterval);\n      this.startTimer(); // D√©marrer le chronom√®tre pour la nouvelle question\n    }\n  }\n};","map":{"version":3,"names":["name","data","questions","currentQuestionIndex","selectedOption","score","feedback","isFinished","timer","initialTime","timerInterval","loading","computed","progressCircleStyle","progress","background","currentQuestion","finalComment","length","created","fetchQuestions","methods","response","fetch","json","results","map","item","question","options","incorrect_answers","correct_answer","sort","Math","random","correctAnswer","startTimer","error","console","selectOption","option","clearInterval","nextQuestion","resetTimer","restartQuiz","setInterval"],"sources":["C:\\Users\\guizi\\OneDrive\\Documents\\ESGI\\IW 4\\Vue et Typescript\\quiz-culture-generale\\src\\views\\QuizPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-container\">\r\n    <h2>Quiz de Culture G√©n√©rale</h2>\r\n    <div v-if=\"!isFinished\">\r\n      <div class=\"progress\">\r\n        Question {{ currentQuestionIndex + 1 }} sur {{ questions.length }}\r\n        <div class=\"progress-circle\" :style=\"progressCircleStyle\"></div>\r\n        <span class=\"timer\">{{ timer }}</span>\r\n      </div>\r\n      <div class=\"question\" v-if=\"currentQuestion\">\r\n        <p>{{ currentQuestion.question }}</p>\r\n      </div>\r\n      <div v-else>\r\n        <p>Chargement des questions...</p>\r\n      </div>\r\n      <div class=\"options\" v-if=\"currentQuestion\">\r\n        <div\r\n          v-for=\"(option, index) in currentQuestion.options\"\r\n          :key=\"index\"\r\n          class=\"option\"\r\n          @click=\"selectOption(option)\"\r\n        >\r\n          {{ option }}\r\n        </div>\r\n      </div>\r\n      <button @click=\"nextQuestion\" class=\"next-button\" :disabled=\"!selectedOption\">Suivant</button>\r\n      <p v-if=\"feedback\" class=\"feedback\">{{ feedback }}</p>\r\n    </div>\r\n    <div v-else>\r\n      <h3>R√©sultat : {{ score }}/{{ questions.length }}</h3>\r\n      <p>{{ finalComment }}</p>\r\n      <button @click=\"restartQuiz\" class=\"restart-button\">Rejouer</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'QuizPage',\r\n  data() {\r\n    return {\r\n    questions: [],\r\n    currentQuestionIndex: 0,\r\n    selectedOption: null,\r\n    score: 0,\r\n    feedback: '',\r\n    isFinished: false,\r\n    timer: 10,\r\n    initialTime: 10,\r\n    timerInterval: null,\r\n    loading: true,\r\n    };\r\n  },\r\n  computed: {\r\n    progressCircleStyle() {\r\n    const progress = ((this.initialTime - this.timer) / this.initialTime) * 100;\r\n    return {\r\n      background: `conic-gradient(#42b983 ${progress}%, #ddd ${progress}% 100%)`,\r\n    };\r\n  },\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex];\r\n    },\r\n    finalComment() {\r\n      if (this.score === this.questions.length) {\r\n        return \"Excellent travail ! üéâ\";\r\n      } else if (this.score >= this.questions.length / 2) {\r\n        return \"Pas mal ! Vous avez bien r√©pondu ! üòä\";\r\n      } else {\r\n        return \"Il y a encore du travail √† faire. Essayez encore ! üòÖ\";\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchQuestions();\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n      try {\r\n        const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple&language=fr');\r\n        const data = await response.json();\r\n        this.questions = data.results.map((item) => ({\r\n          question: item.question,\r\n          options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\r\n          correctAnswer: item.correct_answer,\r\n        }));\r\n        this.startTimer(); // D√©marrer le chronom√®tre apr√®s avoir r√©cup√©r√© les questions\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\r\n      }\r\n    },\r\n    selectOption(option) {\r\n      this.selectedOption = option;\r\n      this.feedback = this.selectedOption === this.currentQuestion.correctAnswer\r\n        ? 'Correct ! üéâ'\r\n        : 'Incorrect ! üò¢';\r\n      if (this.selectedOption === this.currentQuestion.correctAnswer) {\r\n        this.score++;\r\n      }\r\n      clearInterval(this.timerInterval); // Arr√™ter le chronom√®tre lors de la s√©lection\r\n    },\r\n    nextQuestion() {\r\n      this.selectedOption = null;\r\n      this.feedback = '';\r\n      this.currentQuestionIndex++;\r\n\r\n      if (this.currentQuestionIndex >= this.questions.length) {\r\n        this.isFinished = true;\r\n      } else {\r\n        this.resetTimer(); // R√©initialiser le chronom√®tre pour la nouvelle question\r\n      }\r\n    },\r\n    restartQuiz() {\r\n      this.currentQuestionIndex = 0;\r\n      this.score = 0;\r\n      this.isFinished = false;\r\n      this.fetchQuestions(); // Recharger les questions pour une nouvelle partie\r\n    },\r\n    startTimer() {\r\n      this.timer = 10; // R√©initialiser le temps\r\n      this.timerInterval = setInterval(() => {\r\n        if (this.timer > 0) {\r\n          this.timer--;\r\n        } else {\r\n          clearInterval(this.timerInterval);\r\n          this.feedback = 'Temps √©coul√© ! üò¢';\r\n          this.nextQuestion(); // Passer √† la question suivante si le temps est √©coul√©\r\n        }\r\n      }, 1000);\r\n    },\r\n    resetTimer() {\r\n      clearInterval(this.timerInterval);\r\n      this.startTimer(); // D√©marrer le chronom√®tre pour la nouvelle question\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.quiz-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.question {\r\n  margin-bottom: 20px;\r\n  font-size: 1.2em;\r\n}\r\n\r\n.options {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.option {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin: 5px 0;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.option:hover {\r\n  background-color: #e6e6e6;\r\n}\r\n\r\n.next-button, .restart-button {\r\n  margin-top: 20px;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #42b983;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.next-button:disabled {\r\n  background-color: #ccc; /* Couleur pour le bouton d√©sactiv√© */\r\n}\r\n\r\n.next-button:hover:not(:disabled),\r\n.restart-button:hover {\r\n  background-color: #3a9c70;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 10px;\r\n  font-size: 1em;\r\n}\r\n\r\n.progress {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center; /* Centrer le cercle et le texte */\r\n  margin-bottom: 20px;\r\n  font-size: 1.1em;\r\n  color: #333;\r\n}\r\n\r\n.progress-circle {\r\n  width: 80px; /* R√©duction de la taille du cercle */\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  background: conic-gradient(#42b983 0%, #ddd 0%);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  margin: 10px 0;\r\n}\r\n\r\n.timer {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 1.2em; /* Ajustement de la taille de la police */\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}