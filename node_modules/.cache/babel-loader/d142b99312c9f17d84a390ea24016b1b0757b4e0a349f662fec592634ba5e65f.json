{"ast":null,"code":"export default {\n  name: 'QuizPage',\n  data() {\n    return {\n      questions: [],\n      // Contiendra les questions r√©cup√©r√©es depuis l'API\n      currentQuestionIndex: 0,\n      selectedOption: null,\n      score: 0,\n      feedback: '',\n      isFinished: false\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex];\n    }\n  },\n  created() {\n    this.fetchQuestions();\n  },\n  methods: {\n    async fetchQuestions() {\n      try {\n        const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple');\n        const data = await response.json();\n        this.questions = data.results.map(item => ({\n          question: item.question,\n          options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\n          correctAnswer: item.correct_answer\n        }));\n      } catch (error) {\n        console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\n      }\n    },\n    selectOption(option) {\n      this.selectedOption = option;\n      this.feedback = this.selectedOption === this.currentQuestion.correctAnswer ? 'Correct ! üéâ' : 'Incorrect ! üò¢';\n      if (this.selectedOption === this.currentQuestion.correctAnswer) {\n        this.score++;\n      }\n    },\n    nextQuestion() {\n      this.selectedOption = null;\n      this.feedback = '';\n      this.currentQuestionIndex++;\n      if (this.currentQuestionIndex >= this.questions.length) {\n        this.isFinished = true;\n      }\n    },\n    restartQuiz() {\n      this.currentQuestionIndex = 0;\n      this.score = 0;\n      this.isFinished = false;\n      this.fetchQuestions(); // Recharger les questions pour une nouvelle partie\n    }\n  }\n};","map":{"version":3,"names":["name","data","questions","currentQuestionIndex","selectedOption","score","feedback","isFinished","computed","currentQuestion","created","fetchQuestions","methods","response","fetch","json","results","map","item","question","options","incorrect_answers","correct_answer","sort","Math","random","correctAnswer","error","console","selectOption","option","nextQuestion","length","restartQuiz"],"sources":["C:\\Users\\guizi\\OneDrive\\Documents\\ESGI\\IW 4\\Vue et Typescript\\quiz-culture-generale\\src\\views\\QuizPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"quiz-container\">\r\n      <h2>Quiz de Culture G√©n√©rale</h2>\r\n      <div v-if=\"!isFinished\">\r\n        <div class=\"question\">\r\n          <p>{{ currentQuestion.question }}</p>\r\n        </div>\r\n        <div class=\"options\">\r\n          <div\r\n            v-for=\"(option, index) in currentQuestion.options\"\r\n            :key=\"index\"\r\n            class=\"option\"\r\n            @click=\"selectOption(option)\"\r\n          >\r\n            {{ option }}\r\n          </div>\r\n        </div>\r\n        <button @click=\"nextQuestion\" class=\"next-button\" :disabled=\"!selectedOption\">Suivant</button>\r\n        <p v-if=\"feedback\" class=\"feedback\">{{ feedback }}</p>\r\n      </div>\r\n      <div v-else>\r\n        <h3>R√©sultat : {{ score }}/{{ questions.length }}</h3>\r\n        <button @click=\"restartQuiz\" class=\"restart-button\">Rejouer</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'QuizPage',\r\n    data() {\r\n      return {\r\n        questions: [], // Contiendra les questions r√©cup√©r√©es depuis l'API\r\n        currentQuestionIndex: 0,\r\n        selectedOption: null,\r\n        score: 0,\r\n        feedback: '',\r\n        isFinished: false,\r\n      };\r\n    },\r\n    computed: {\r\n      currentQuestion() {\r\n        return this.questions[this.currentQuestionIndex];\r\n      },\r\n    },\r\n    created() {\r\n      this.fetchQuestions();\r\n    },\r\n    methods: {\r\n      async fetchQuestions() {\r\n        try {\r\n          const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple');\r\n          const data = await response.json();\r\n          this.questions = data.results.map((item) => ({\r\n            question: item.question,\r\n            options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\r\n            correctAnswer: item.correct_answer,\r\n          }));\r\n        } catch (error) {\r\n          console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\r\n        }\r\n      },\r\n      selectOption(option) {\r\n        this.selectedOption = option;\r\n        this.feedback = this.selectedOption === this.currentQuestion.correctAnswer\r\n          ? 'Correct ! üéâ'\r\n          : 'Incorrect ! üò¢';\r\n        if (this.selectedOption === this.currentQuestion.correctAnswer) {\r\n          this.score++;\r\n        }\r\n      },\r\n      nextQuestion() {\r\n        this.selectedOption = null;\r\n        this.feedback = '';\r\n        this.currentQuestionIndex++;\r\n  \r\n        if (this.currentQuestionIndex >= this.questions.length) {\r\n          this.isFinished = true;\r\n        }\r\n      },\r\n      restartQuiz() {\r\n        this.currentQuestionIndex = 0;\r\n        this.score = 0;\r\n        this.isFinished = false;\r\n        this.fetchQuestions(); // Recharger les questions pour une nouvelle partie\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  .quiz-container {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 8px;\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  .question {\r\n    margin-bottom: 20px;\r\n    font-size: 1.2em;\r\n  }\r\n  \r\n  .options {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .option {\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    margin: 5px 0;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .option:hover {\r\n    background-color: #e6e6e6;\r\n  }\r\n  \r\n  .next-button, .restart-button {\r\n    margin-top: 20px;\r\n    padding: 10px 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #42b983;\r\n    color: white;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .next-button:disabled {\r\n    background-color: #ccc; /* Couleur pour le bouton d√©sactiv√© */\r\n  }\r\n  \r\n  .next-button:hover:not(:disabled),\r\n  .restart-button:hover {\r\n    background-color: #3a9c70;\r\n  }\r\n  \r\n  .feedback {\r\n    margin-top: 10px;\r\n    font-size: 1em;\r\n  }\r\n  </style>  "],"mappings":"AA4BE,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MAAE;MACfC,oBAAoB,EAAE,CAAC;MACvBC,cAAc,EAAE,IAAI;MACpBC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACP,SAAS,CAAC,IAAI,CAACC,oBAAoB,CAAC;IAClD;EACF,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,qDAAqD,CAAC;QACnF,MAAMb,IAAG,GAAI,MAAMY,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAI,CAACb,SAAQ,GAAID,IAAI,CAACe,OAAO,CAACC,GAAG,CAAEC,IAAI,KAAM;UAC3CC,QAAQ,EAAED,IAAI,CAACC,QAAQ;UACvBC,OAAO,EAAE,CAAC,GAAGF,IAAI,CAACG,iBAAiB,EAAEH,IAAI,CAACI,cAAc,CAAC,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,CAAC;UACzFC,aAAa,EAAER,IAAI,CAACI;QACtB,CAAC,CAAC,CAAC;MACL,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACxE;IACF,CAAC;IACDE,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAAC1B,cAAa,GAAI0B,MAAM;MAC5B,IAAI,CAACxB,QAAO,GAAI,IAAI,CAACF,cAAa,KAAM,IAAI,CAACK,eAAe,CAACiB,aAAY,GACrE,cAAa,GACb,gBAAgB;MACpB,IAAI,IAAI,CAACtB,cAAa,KAAM,IAAI,CAACK,eAAe,CAACiB,aAAa,EAAE;QAC9D,IAAI,CAACrB,KAAK,EAAE;MACd;IACF,CAAC;IACD0B,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC3B,cAAa,GAAI,IAAI;MAC1B,IAAI,CAACE,QAAO,GAAI,EAAE;MAClB,IAAI,CAACH,oBAAoB,EAAE;MAE3B,IAAI,IAAI,CAACA,oBAAmB,IAAK,IAAI,CAACD,SAAS,CAAC8B,MAAM,EAAE;QACtD,IAAI,CAACzB,UAAS,GAAI,IAAI;MACxB;IACF,CAAC;IACD0B,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC9B,oBAAmB,GAAI,CAAC;MAC7B,IAAI,CAACE,KAAI,GAAI,CAAC;MACd,IAAI,CAACE,UAAS,GAAI,KAAK;MACvB,IAAI,CAACI,cAAc,CAAC,CAAC,EAAE;IACzB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}