{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"progress\"\n};\nconst _hoisted_4 = {\n  class: \"timer\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"question\"\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  key: 2,\n  class: \"options\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = {\n  key: 3,\n  class: \"feedback\"\n};\nconst _hoisted_11 = {\n  key: 4,\n  class: \"streak\"\n};\nconst _hoisted_12 = {\n  key: 5,\n  class: \"streak\"\n};\nconst _hoisted_13 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Quiz de Culture G√©n√©rale\", -1 /* HOISTED */)), !$data.isFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createTextVNode(\" Question \" + _toDisplayString($data.currentQuestionIndex + 1) + \" sur \" + _toDisplayString($data.questions.length) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: \"progress-circle\",\n    style: _normalizeStyle($options.progressCircleStyle)\n  }, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString($data.timer), 1 /* TEXT */)], 4 /* STYLE */)]), $options.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"p\", null, _toDisplayString($options.currentQuestion.question), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _cache[2] || (_cache[2] = [_createElementVNode(\"p\", null, \"Chargement des questions...\", -1 /* HOISTED */)]))), $options.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentQuestion.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"option\",\n      onClick: $event => $options.selectOption(option)\n    }, _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.nextQuestion && $options.nextQuestion(...args)),\n    class: \"next-button\",\n    disabled: !$data.selectedOption\n  }, \"Suivant\", 8 /* PROPS */, _hoisted_9), $data.feedback ? (_openBlock(), _createElementBlock(\"p\", _hoisted_10, _toDisplayString($data.feedback), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Affiche la s√©rie de bonnes ou de mauvaises r√©ponses \"), _ctx.goodStreak > 1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, \" üî• S√©rie de bonnes r√©ponses : \" + _toDisplayString(_ctx.goodStreak), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _ctx.badStreak > 1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, \" ‚ùÑÔ∏è S√©rie de mauvaises r√©ponses : \" + _toDisplayString(_ctx.badStreak), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"h3\", null, \"R√©sultat : \" + _toDisplayString($data.score) + \"/\" + _toDisplayString($data.questions.length), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($options.finalComment), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.restartQuiz && $options.restartQuiz(...args)),\n    class: \"restart-button\"\n  }, \"Rejouer\")]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","isFinished","_hoisted_2","_hoisted_3","_createTextVNode","_toDisplayString","currentQuestionIndex","questions","length","style","_normalizeStyle","$options","progressCircleStyle","_hoisted_4","timer","currentQuestion","_hoisted_5","question","_hoisted_6","_cache","_hoisted_7","_Fragment","_renderList","options","option","index","onClick","$event","selectOption","_hoisted_8","_createCommentVNode","args","nextQuestion","disabled","selectedOption","_hoisted_9","feedback","_hoisted_10","_ctx","goodStreak","_hoisted_11","badStreak","_hoisted_12","_hoisted_13","score","finalComment","restartQuiz"],"sources":["C:\\Users\\guizi\\OneDrive\\Documents\\ESGI\\IW 4\\Vue et Typescript\\quiz-culture-generale\\src\\views\\QuizPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-container\">\r\n    <h2>Quiz de Culture G√©n√©rale</h2>\r\n    <div v-if=\"!isFinished\">\r\n      <div class=\"progress\">\r\n        Question {{ currentQuestionIndex + 1 }} sur {{ questions.length }}\r\n        <div class=\"progress-circle\" :style=\"progressCircleStyle\">\r\n        <span class=\"timer\">{{ timer }}</span>\r\n      </div>\r\n      </div>\r\n      <div class=\"question\" v-if=\"currentQuestion\">\r\n        <p>{{ currentQuestion.question }}</p>\r\n      </div>\r\n      <div v-else>\r\n        <p>Chargement des questions...</p>\r\n      </div>\r\n      <div class=\"options\" v-if=\"currentQuestion\">\r\n        <div\r\n          v-for=\"(option, index) in currentQuestion.options\"\r\n          :key=\"index\"\r\n          class=\"option\"\r\n          @click=\"selectOption(option)\"\r\n        >\r\n          {{ option }}\r\n        </div>\r\n      </div>\r\n      <button @click=\"nextQuestion\" class=\"next-button\" :disabled=\"!selectedOption\">Suivant</button>\r\n      <p v-if=\"feedback\" class=\"feedback\">{{ feedback }}</p>\r\n\r\n      <!-- Affiche la s√©rie de bonnes ou de mauvaises r√©ponses -->\r\n      <div v-if=\"goodStreak > 1\" class=\"streak\">\r\n        üî• S√©rie de bonnes r√©ponses : {{ goodStreak }}\r\n      </div>\r\n      <div v-if=\"badStreak > 1\" class=\"streak\">\r\n        ‚ùÑÔ∏è S√©rie de mauvaises r√©ponses : {{ badStreak }}\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <h3>R√©sultat : {{ score }}/{{ questions.length }}</h3>\r\n      <p>{{ finalComment }}</p>\r\n      <button @click=\"restartQuiz\" class=\"restart-button\">Rejouer</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'QuizPage',\r\n  data() {\r\n    return {\r\n    questions: [],\r\n    currentQuestionIndex: 0,\r\n    selectedOption: null,\r\n    score: 0,\r\n    feedback: '',\r\n    isFinished: false,\r\n    timer: 10,\r\n    initialTime: 10,\r\n    timerInterval: null,\r\n    loading: true,\r\n    };\r\n  },\r\n  computed: {\r\n    progressCircleStyle() {\r\n    const progress = ((this.initialTime - this.timer) / this.initialTime) * 100;\r\n    return {\r\n      background: `conic-gradient(#42b983 ${progress}%, #ddd ${progress}% 100%)`,\r\n    };\r\n  },\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex];\r\n    },\r\n    finalComment() {\r\n      if (this.score === this.questions.length) {\r\n        return \"Excellent travail ! üéâ\";\r\n      } else if (this.score >= this.questions.length / 2) {\r\n        return \"Pas mal ! Vous avez bien r√©pondu ! üòä\";\r\n      } else {\r\n        return \"Il y a encore du travail √† faire. Essayez encore ! üòÖ\";\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchQuestions();\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n      try {\r\n        const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple&language=fr');\r\n        const data = await response.json();\r\n        this.questions = data.results.map((item) => ({\r\n          question: item.question,\r\n          options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\r\n          correctAnswer: item.correct_answer,\r\n        }));\r\n        this.startTimer(); // D√©marrer le chronom√®tre apr√®s avoir r√©cup√©r√© les questions\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\r\n      }\r\n    },\r\n    selectOption(option) {\r\n      this.selectedOption = option;\r\n      this.feedback = this.selectedOption === this.currentQuestion.correctAnswer\r\n        ? 'Correct ! üéâ'\r\n        : 'Incorrect ! üò¢';\r\n      if (this.selectedOption === this.currentQuestion.correctAnswer) {\r\n        this.score++;\r\n      }\r\n      clearInterval(this.timerInterval); // Arr√™ter le chronom√®tre lors de la s√©lection\r\n    },\r\n    nextQuestion() {\r\n      this.selectedOption = null;\r\n      this.feedback = '';\r\n      this.currentQuestionIndex++;\r\n\r\n      if (this.currentQuestionIndex >= this.questions.length) {\r\n        this.isFinished = true;\r\n      } else {\r\n        this.resetTimer(); // R√©initialiser le chronom√®tre pour la nouvelle question\r\n      }\r\n    },\r\n    restartQuiz() {\r\n      this.currentQuestionIndex = 0;\r\n      this.score = 0;\r\n      this.isFinished = false;\r\n      this.fetchQuestions(); // Recharger les questions pour une nouvelle partie\r\n    },\r\n    startTimer() {\r\n      this.timer = 10; // R√©initialiser le temps\r\n      this.timerInterval = setInterval(() => {\r\n        if (this.timer > 0) {\r\n          this.timer--;\r\n        } else {\r\n          clearInterval(this.timerInterval);\r\n          this.feedback = 'Temps √©coul√© ! üò¢';\r\n          this.nextQuestion(); // Passer √† la question suivante si le temps est √©coul√©\r\n        }\r\n      }, 1000);\r\n    },\r\n    resetTimer() {\r\n      clearInterval(this.timerInterval);\r\n      this.startTimer(); // D√©marrer le chronom√®tre pour la nouvelle question\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.quiz-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.question {\r\n  margin-bottom: 20px;\r\n  font-size: 1.2em;\r\n}\r\n\r\n.options {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.option {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin: 5px 0;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.option:hover {\r\n  background-color: #e6e6e6;\r\n}\r\n\r\n.next-button, .restart-button {\r\n  margin-top: 20px;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #42b983;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.next-button:disabled {\r\n  background-color: #ccc; /* Couleur pour le bouton d√©sactiv√© */\r\n}\r\n\r\n.next-button:hover:not(:disabled),\r\n.restart-button:hover {\r\n  background-color: #3a9c70;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 10px;\r\n  font-size: 1em;\r\n}\r\n\r\n.progress {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center; /* Centrer le cercle et le texte */\r\n  margin-bottom: 20px;\r\n  font-size: 1.1em;\r\n  color: #333;\r\n}\r\n\r\n.progress-circle {\r\n  width: 80px; /* R√©duction de la taille du cercle */\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  background: conic-gradient(#42b983 0%, #ddd 0%);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  margin: 10px 0;\r\n}\r\n\r\n.timer {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 1.2em; /* Ajustement de la taille de la police */\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}