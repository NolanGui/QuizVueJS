{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'QuizPage',\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      selectedOption: null,\n      score: 0,\n      feedback: '',\n      isFinished: false,\n      timer: 10,\n      initialTime: 10,\n      timerInterval: null,\n      loading: true,\n      goodStreak: 0,\n      badStreak: 0,\n      isOptionSelected: false,\n      difficulty: \"medium\",\n      category: 9\n    };\n  },\n  computed: {\n    progressCircleStyle() {\n      const progress = (this.initialTime - this.timer) / this.initialTime * 100;\n      return {\n        background: `conic-gradient(#42b983 ${progress}%, #ddd ${progress}% 100%)`\n      };\n    },\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex];\n    },\n    finalComment() {\n      if (this.score === this.questions.length) {\n        return \"Excellent travail ! üéâ\";\n      } else if (this.score >= this.questions.length / 2) {\n        return \"Pas mal ! Vous avez bien r√©pondu ! üòä\";\n      } else {\n        return \"Il y a encore du travail √† faire. Essayez encore ! üòÖ\";\n      }\n    }\n  },\n  created() {\n    this.fetchQuestions();\n  },\n  methods: {\n    async fetchQuestions() {\n      try {\n        const response = await fetch(`https://opentdb.com/api.php?amount=10&type=multiple&difficulty=${this.difficulty}&category=${this.category}`);\n        const data = await response.json();\n        this.questions = data.results.map(item => ({\n          question: item.question,\n          options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\n          correctAnswer: item.correct_answer\n        }));\n        this.startTimer();\n      } catch (error) {\n        console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\n      }\n    },\n    selectOption(option) {\n      if (!this.isOptionSelected) {\n        this.selectedOption = option;\n        this.isOptionSelected = true;\n        if (this.selectedOption === this.currentQuestion.correctAnswer) {\n          this.feedback = 'Correct ! üéâ';\n          this.score++;\n          this.goodStreak++;\n          this.badStreak = 0;\n        } else {\n          this.feedback = 'Incorrect ! üò¢';\n          this.badStreak++;\n          this.goodStreak = 0;\n        }\n        clearInterval(this.timerInterval);\n      }\n    },\n    startTimer() {\n      this.timer = 10;\n      this.timerInterval = setInterval(() => {\n        if (this.timer > 0) {\n          this.timer--;\n        } else {\n          clearInterval(this.timerInterval);\n          this.feedback = 'Temps √©coul√© ! üò¢';\n          this.nextQuestion();\n        }\n      }, 1000);\n    },\n    resetTimer() {\n      clearInterval(this.timerInterval);\n      this.startTimer();\n    },\n    nextQuestion() {\n      this.selectedOption = null;\n      this.feedback = '';\n      this.isOptionSelected = false;\n      this.currentQuestionIndex++;\n      if (this.currentQuestionIndex >= this.questions.length) {\n        this.isFinished = true;\n        this.saveScore();\n      } else {\n        this.resetTimer();\n      }\n    },\n    saveScore() {\n      const currentScore = {\n        points: this.score,\n        bestStreak: this.goodStreak > 0 ? this.goodStreak : 1\n      };\n      const scores = JSON.parse(localStorage.getItem('quizScores')) || [];\n      scores.push(currentScore);\n      localStorage.setItem('quizScores', JSON.stringify(scores));\n    },\n    restartQuiz() {\n      this.currentQuestionIndex = 0;\n      this.score = 0;\n      this.isFinished = false;\n      this.goodStreak = 0;\n      this.badStreak = 0;\n      this.fetchQuestions();\n    }\n  }\n};","map":{"version":3,"names":["name","data","questions","currentQuestionIndex","selectedOption","score","feedback","isFinished","timer","initialTime","timerInterval","loading","goodStreak","badStreak","isOptionSelected","difficulty","category","computed","progressCircleStyle","progress","background","currentQuestion","finalComment","length","created","fetchQuestions","methods","response","fetch","json","results","map","item","question","options","incorrect_answers","correct_answer","sort","Math","random","correctAnswer","startTimer","error","console","selectOption","option","clearInterval","setInterval","nextQuestion","resetTimer","saveScore","currentScore","points","bestStreak","scores","JSON","parse","localStorage","getItem","push","setItem","stringify","restartQuiz"],"sources":["C:\\Users\\guizi\\OneDrive\\Documents\\ESGI\\IW 4\\Vue et Typescript\\quiz-culture-generale\\src\\views\\QuizPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-container\">\r\n    <h2>Quiz de Culture G√©n√©rale</h2>\r\n    <div v-if=\"!isFinished\">\r\n      <div class=\"progress\">\r\n        Question {{ currentQuestionIndex + 1 }} sur {{ questions.length }}\r\n        <div class=\"progress-circle\" :style=\"progressCircleStyle\">\r\n          <span class=\"timer\">{{ timer }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"question\" v-if=\"currentQuestion\">\r\n        <p>{{ currentQuestion.question }}</p>\r\n      </div>\r\n      <div v-else>\r\n        <p>Chargement des questions...</p>\r\n      </div>\r\n      <div class=\"options\" v-if=\"currentQuestion\">\r\n        <div\r\n          v-for=\"(option, index) in currentQuestion.options\"\r\n          :key=\"index\"\r\n          class=\"option\"\r\n          :class=\"{ disabled: isOptionSelected && selectedOption === option }\"\r\n          @click=\"selectOption(option)\"\r\n        >\r\n          {{ option }}\r\n        </div>\r\n\r\n      </div>\r\n      <button @click=\"nextQuestion\" class=\"next-button\" :disabled=\"!selectedOption\">Suivant</button>\r\n      <p v-if=\"feedback\" class=\"feedback\">{{ feedback }}</p>\r\n\r\n      <div v-if=\"goodStreak > 1\" class=\"streak\">\r\n        üî• S√©rie de bonnes r√©ponses : {{ goodStreak }}\r\n      </div>\r\n      <div v-if=\"badStreak > 1\" class=\"streak\">\r\n        ‚ùÑÔ∏è S√©rie de mauvaises r√©ponses : {{ badStreak }}\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <h3>R√©sultat : {{ score }}/{{ questions.length }}</h3>\r\n      <p>{{ finalComment }}</p>\r\n      <button @click=\"restartQuiz\" class=\"restart-button\">Rejouer</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'QuizPage',\r\n  data() {\r\n    return {\r\n      questions: [],\r\n      currentQuestionIndex: 0,\r\n      selectedOption: null,\r\n      score: 0,\r\n      feedback: '',\r\n      isFinished: false,\r\n      timer: 10,\r\n      initialTime: 10,\r\n      timerInterval: null,\r\n      loading: true,\r\n      goodStreak: 0,\r\n      badStreak: 0,\r\n      isOptionSelected: false,\r\n      difficulty: \"medium\",\r\n      category: 9,\r\n    };\r\n  },\r\n  computed: {\r\n    progressCircleStyle() {\r\n      const progress = ((this.initialTime - this.timer) / this.initialTime) * 100;\r\n      return {\r\n        background: `conic-gradient(#42b983 ${progress}%, #ddd ${progress}% 100%)`,\r\n      };\r\n    },\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex];\r\n    },\r\n    finalComment() {\r\n      if (this.score === this.questions.length) {\r\n        return \"Excellent travail ! üéâ\";\r\n      } else if (this.score >= this.questions.length / 2) {\r\n        return \"Pas mal ! Vous avez bien r√©pondu ! üòä\";\r\n      } else {\r\n        return \"Il y a encore du travail √† faire. Essayez encore ! üòÖ\";\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchQuestions();\r\n  },\r\n  methods: {\r\n    async fetchQuestions() {\r\n    try {\r\n      const response = await fetch(\r\n        `https://opentdb.com/api.php?amount=10&type=multiple&difficulty=${this.difficulty}&category=${this.category}`\r\n      );\r\n      const data = await response.json();\r\n      this.questions = data.results.map((item) => ({\r\n        question: item.question,\r\n        options: [...item.incorrect_answers, item.correct_answer].sort(() => Math.random() - 0.5),\r\n        correctAnswer: item.correct_answer,\r\n      }));\r\n      this.startTimer();\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la r√©cup√©ration des questions :\", error);\r\n    }\r\n  },\r\n    selectOption(option) {\r\n      if (!this.isOptionSelected) {\r\n        this.selectedOption = option;\r\n        this.isOptionSelected = true;\r\n        if (this.selectedOption === this.currentQuestion.correctAnswer) {\r\n          this.feedback = 'Correct ! üéâ';\r\n          this.score++;\r\n          this.goodStreak++;\r\n          this.badStreak = 0;\r\n        } else {\r\n          this.feedback = 'Incorrect ! üò¢';\r\n          this.badStreak++;\r\n          this.goodStreak = 0;\r\n        }\r\n        clearInterval(this.timerInterval);\r\n      }\r\n    },\r\n    startTimer() {\r\n      this.timer = 10;\r\n      this.timerInterval = setInterval(() => {\r\n        if (this.timer > 0) {\r\n          this.timer--;\r\n        } else {\r\n          clearInterval(this.timerInterval);\r\n          this.feedback = 'Temps √©coul√© ! üò¢';\r\n          this.nextQuestion();\r\n        }\r\n      }, 1000);\r\n    },\r\n    resetTimer() {\r\n      clearInterval(this.timerInterval);\r\n      this.startTimer();\r\n    },\r\n    nextQuestion() {\r\n    this.selectedOption = null;\r\n    this.feedback = '';\r\n    this.isOptionSelected = false; \r\n    this.currentQuestionIndex++;\r\n\r\n    if (this.currentQuestionIndex >= this.questions.length) {\r\n      this.isFinished = true;\r\n      this.saveScore(); \r\n    } else {\r\n      this.resetTimer();\r\n    }\r\n  },\r\n  \r\n  saveScore() {\r\n  const currentScore = {\r\n    points: this.score,\r\n    bestStreak: this.goodStreak > 0 ? this.goodStreak : 1,\r\n  };\r\n\r\n    const scores = JSON.parse(localStorage.getItem('quizScores')) || [];\r\n    scores.push(currentScore);\r\n    localStorage.setItem('quizScores', JSON.stringify(scores));\r\n  },\r\n\r\n  restartQuiz() {\r\n    this.currentQuestionIndex = 0;\r\n    this.score = 0;\r\n    this.isFinished = false;\r\n    this.goodStreak = 0;\r\n    this.badStreak = 0;\r\n    this.fetchQuestions();\r\n  },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.streak {\r\n  font-size: 1.2em;\r\n  margin-top: 15px;\r\n}\r\n.quiz-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.question {\r\n  margin-bottom: 20px;\r\n  font-size: 1.2em;\r\n}\r\n\r\n.options {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.option {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  margin: 5px 0;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.option.disabled {\r\n  pointer-events: none; /* Emp√™che les clics */\r\n  background-color: #ccc; /* Grise l'option */\r\n}\r\n\r\n.option:hover {\r\n  background-color: #e6e6e6;\r\n}\r\n\r\n.next-button, .restart-button {\r\n  margin-top: 20px;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #42b983;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.next-button:disabled {\r\n  background-color: #ccc;\r\n}\r\n\r\n.next-button:hover:not(:disabled),\r\n.restart-button:hover {\r\n  background-color: #3a9c70;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 10px;\r\n  font-size: 1em;\r\n}\r\n\r\n.progress {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 1.1em;\r\n  color: #333;\r\n}\r\n\r\n.progress-circle {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  background: conic-gradient(#42b983 0%, #ddd 0%);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  margin: 10px 0;\r\n}\r\n\r\n.timer {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 1.2em;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}